// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseUser", b =>
                {
                    b.Property<Guid>("EnrolledCoursesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EnrolledStudentsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EnrolledCoursesId", "EnrolledStudentsId");

                    b.HasIndex("EnrolledStudentsId");

                    b.ToTable("CourseEnrollments", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CourseId");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<Guid>("InstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(7,2)");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870"),
                            Category = "Web Development",
                            CreatedAt = new DateTime(2025, 4, 22, 12, 0, 49, 485, DateTimeKind.Utc).AddTicks(3537),
                            Description = "Learn the basics of web development including HTML, CSS, and JavaScript",
                            Duration = 1800,
                            InstructorId = new Guid("80abbca8-664d-4b20-b5de-024705497d4a"),
                            IsPublished = true,
                            Level = "Beginner",
                            Price = 49.99m,
                            ThumbnailUrl = "/images/courses/web-dev-intro.jpg",
                            Title = "Introduction to Web Development"
                        },
                        new
                        {
                            Id = new Guid("3d490a70-94ce-4d15-9494-5248280c2ce3"),
                            Category = "Programming",
                            CreatedAt = new DateTime(2025, 4, 22, 12, 0, 49, 485, DateTimeKind.Utc).AddTicks(3541),
                            Description = "Master Python with advanced concepts and real-world projects",
                            Duration = 2400,
                            InstructorId = new Guid("80abbca8-664d-4b20-b5de-024705497d4a"),
                            IsPublished = true,
                            Level = "Advanced",
                            Price = 79.99m,
                            ThumbnailUrl = "/images/courses/python-advanced.jpg",
                            Title = "Advanced Python Programming"
                        });
                });

            modelBuilder.Entity("Entities.Models.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LessonId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<string>("ResourceUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80abbca8-664d-4b20-b5de-024705497d4b"),
                            Content = "Learn about basic HTML tags and their usage",
                            ContentType = "Video",
                            CreatedAt = new DateTime(2025, 4, 22, 12, 0, 49, 485, DateTimeKind.Utc).AddTicks(3684),
                            Duration = 45,
                            ModuleId = new Guid("d173e20d-159e-4127-9ce9-b0ac2564ad97"),
                            OrderIndex = 1,
                            ResourceUrl = "/videos/html-intro.mp4",
                            Title = "Introduction to HTML Tags"
                        },
                        new
                        {
                            Id = new Guid("86dba8c0-d178-41e7-938c-ed49778fb52b"),
                            Content = "Understanding different types of CSS selectors",
                            ContentType = "Text",
                            CreatedAt = new DateTime(2025, 4, 22, 12, 0, 49, 485, DateTimeKind.Utc).AddTicks(3690),
                            Duration = 30,
                            ModuleId = new Guid("40ff5488-fdab-45b5-bc3a-14302d59869a"),
                            OrderIndex = 1,
                            ResourceUrl = "/content/css-selectors.html",
                            Title = "CSS Selectors"
                        },
                        new
                        {
                            Id = new Guid("021ca3c1-0deb-4afd-ae94-2159a8479811"),
                            Content = "Advanced concepts of Python dictionaries",
                            ContentType = "Video",
                            CreatedAt = new DateTime(2025, 4, 22, 12, 0, 49, 485, DateTimeKind.Utc).AddTicks(3716),
                            Duration = 60,
                            ModuleId = new Guid("5b1c2b4d-48c7-402a-80c3-cc796ad49c6b"),
                            OrderIndex = 1,
                            ResourceUrl = "/videos/python-dict.mp4",
                            Title = "Python Dictionaries Deep Dive"
                        });
                });

            modelBuilder.Entity("Entities.Models.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ModuleId");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d173e20d-159e-4127-9ce9-b0ac2564ad97"),
                            CourseId = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870"),
                            CreatedAt = new DateTime(2025, 4, 22, 12, 0, 49, 485, DateTimeKind.Utc).AddTicks(3613),
                            Description = "Learn the basics of HTML markup language",
                            OrderIndex = 1,
                            Title = "HTML Fundamentals"
                        },
                        new
                        {
                            Id = new Guid("40ff5488-fdab-45b5-bc3a-14302d59869a"),
                            CourseId = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870"),
                            CreatedAt = new DateTime(2025, 4, 22, 12, 0, 49, 485, DateTimeKind.Utc).AddTicks(3615),
                            Description = "Master CSS styling techniques",
                            OrderIndex = 2,
                            Title = "CSS Styling"
                        },
                        new
                        {
                            Id = new Guid("5b1c2b4d-48c7-402a-80c3-cc796ad49c6b"),
                            CourseId = new Guid("3d490a70-94ce-4d15-9494-5248280c2ce3"),
                            CreatedAt = new DateTime(2025, 4, 22, 12, 0, 49, 485, DateTimeKind.Utc).AddTicks(3618),
                            Description = "Deep dive into Python's advanced data structures",
                            OrderIndex = 1,
                            Title = "Python Advanced Data Structures"
                        });
                });

            modelBuilder.Entity("Entities.Models.Progress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProgressId");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastPosition")
                        .HasColumnType("int");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("Progresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2902b665-1190-4c70-9915-b9c2d7680450"),
                            CompletedAt = new DateTime(2025, 4, 21, 12, 0, 49, 485, DateTimeKind.Utc).AddTicks(3776),
                            CreatedAt = new DateTime(2025, 4, 20, 12, 0, 49, 485, DateTimeKind.Utc).AddTicks(3784),
                            IsCompleted = true,
                            LastPosition = 45,
                            LessonId = new Guid("80abbca8-664d-4b20-b5de-024705497d4b"),
                            UserId = new Guid("86dba8c0-d178-41e7-938c-ed49778fb52a")
                        },
                        new
                        {
                            Id = new Guid("102b566b-ba1f-404c-b2df-e2cde39ade09"),
                            CreatedAt = new DateTime(2025, 4, 21, 12, 0, 49, 485, DateTimeKind.Utc).AddTicks(3787),
                            IsCompleted = false,
                            LastPosition = 15,
                            LessonId = new Guid("86dba8c0-d178-41e7-938c-ed49778fb52b"),
                            UserId = new Guid("86dba8c0-d178-41e7-938c-ed49778fb52a")
                        });
                });

            modelBuilder.Entity("Entities.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ReviewId");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80abbca8-664d-4b20-b5de-024705497d4c"),
                            Comment = "Excellent course! Very well structured and informative.",
                            CourseId = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870"),
                            CreatedAt = new DateTime(2025, 4, 17, 12, 0, 49, 485, DateTimeKind.Utc).AddTicks(3848),
                            Rating = 5,
                            UserId = new Guid("86dba8c0-d178-41e7-938c-ed49778fb52a")
                        },
                        new
                        {
                            Id = new Guid("86dba8c0-d178-41e7-938c-ed49778fb52c"),
                            Comment = "Great advanced content, but could use more examples.",
                            CourseId = new Guid("3d490a70-94ce-4d15-9494-5248280c2ce3"),
                            CreatedAt = new DateTime(2025, 4, 20, 12, 0, 49, 485, DateTimeKind.Utc).AddTicks(3851),
                            Rating = 4,
                            UserId = new Guid("86dba8c0-d178-41e7-938c-ed49778fb52a")
                        });
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80abbca8-664d-4b20-b5de-024705497d4a"),
                            CreatedAt = new DateTime(2025, 4, 22, 12, 0, 49, 485, DateTimeKind.Utc).AddTicks(3393),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            IsActive = true,
                            LastName = "Doe",
                            PasswordHash = "hashed_password_123",
                            Role = "Instructor",
                            Username = "john_instructor"
                        },
                        new
                        {
                            Id = new Guid("86dba8c0-d178-41e7-938c-ed49778fb52a"),
                            CreatedAt = new DateTime(2025, 4, 22, 12, 0, 49, 485, DateTimeKind.Utc).AddTicks(3396),
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            IsActive = true,
                            LastName = "Smith",
                            PasswordHash = "hashed_password_456",
                            Role = "Student",
                            Username = "jane_student"
                        });
                });

            modelBuilder.Entity("CourseUser", b =>
                {
                    b.HasOne("Entities.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("EnrolledCoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("EnrolledStudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Course", b =>
                {
                    b.HasOne("Entities.Models.User", "Instructor")
                        .WithMany("TeachingCourses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Entities.Models.Lesson", b =>
                {
                    b.HasOne("Entities.Models.Module", "Module")
                        .WithMany("Lessons")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Entities.Models.Module", b =>
                {
                    b.HasOne("Entities.Models.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Entities.Models.Progress", b =>
                {
                    b.HasOne("Entities.Models.Lesson", "Lesson")
                        .WithMany("StudentProgress")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Review", b =>
                {
                    b.HasOne("Entities.Models.Course", "Course")
                        .WithMany("Reviews")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Course", b =>
                {
                    b.Navigation("Modules");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Entities.Models.Lesson", b =>
                {
                    b.Navigation("StudentProgress");
                });

            modelBuilder.Entity("Entities.Models.Module", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Navigation("TeachingCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
